= render "pages/arm/menu"

%h1= title "Arm is the target"

%p
  So, since the first target is arm, some of us may need to learn a bit (yep, that’s me). So this is
  a collection of helpful resources (links and specs) with sometimes very very brief summaries.
%p So why learn assembler, after all, it’s likely you spent your programmers life  avoiding it:
%ul
  %li Some things can not be expressed in ruby
  %li To speed things up.
  %li To add cpu specific capabilities
%h2#links Links
%p
  A very good
  = ext_link "summary pdf" , "/arm/arm_inst.pdf"
  from the arm university
%p
  = ext_link "Dave’s", "http://www.davespace.co.uk/arm/introduction-to-arm/why-learn.html"
  site explains just about
  everything about the arm in nice and easy to understand terms.
%p
  A nice series on thinkgeek, here is the integer
  =ext_link "division section" ,  "http://thinkingeek.com/2013/08/11/arm-assembler-raspberry-pi-chapter-15/"
  that has
  =ext_link "code repository", "https://github.com/rofirrim/raspberry-pi-assembler/blob/master/chapter15/magic.py"
  with code to generate code for constants.
%p
  And off course there is the overwhelming arm infocenter,
  = ext_link "here with it’s bizarre division" ,  "http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0473c/CEGECDGD.html"
%p
  The full 750 page specification for the pi , the
  = ext_link "ARM1176JZF-S pdf is here" , "/arm/big_spec.pdf"
  or
  =ext_link "online" , "http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABFADHJ.html"
%p
  A nice list of
  =ext_link "Kernel calls" , "http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html"

%h2 Virtual pi
%p
  And since not everyone has access to an arm, here is a description how to set up an
  = link_to "emulated pi" , "qemu.html"
%p
  And how to
  =link_to "access that" , "remote_pi.html"
  or any remote machine with ssl
